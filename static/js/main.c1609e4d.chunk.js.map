{"version":3,"sources":["components/js/App.js","models/serviceWorker.js","index.js"],"names":["App","breakRatio","Math","ceil","pomodoroDurationSec","useState","focusTimeSec","setFocusTime","breakTimeSec","setBreakTime","isCounting","setIsCounting","isFocus","setIsFocus","pomCount","setPomCount","cloverCount","setCloverCount","flowNotes","setFlowNotes","reset","useEffect","interval","setInterval","newFocusTime","seconds","newPomCount","count","clearInterval","className","floor","onClick","submitOnEnter","cancelOnEscape","editOnViewClick","viewContainerClassName","type","inputProps","rows","saveButtonContent","cancelButtonContent","editButtonContent","value","onSave","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAoHeA,MA/Gf,WACE,IAEMC,EAAaC,KAAKC,KAAKC,GAHhB,EAMwBC,mBALT,MADf,mBAMNC,EANM,KAMQC,EANR,OAOwBF,mBAAS,GAPjC,mBAONG,EAPM,KAOQC,EAPR,OAQuBJ,oBAAS,GARhC,mBAQNK,EARM,KAQMC,EARN,OASiBN,oBAAS,GAT1B,mBASNO,EATM,KASGC,EATH,OAUmBR,mBAAS,GAV5B,mBAUNS,EAVM,KAUIC,EAVJ,OAWyBV,mBAAS,GAXlC,mBAWNW,EAXM,KAWOC,EAXP,OAaoBZ,mBAAS,cAb7B,mBAaPa,EAbO,KAaIC,EAbJ,KA4Bb,SAASC,IACPb,EA5B0B,MA6B1BE,EAAa,GACbI,GAAW,GACXF,GAAc,GA4ChB,OAzCAU,qBAAU,WACR,IAAIC,EAAW,KAqCf,OAnCIZ,GAAcE,EAEhBU,EAAWC,aAAY,WACrB,IAAIC,EAAelB,EAAe,EAKlC,GAJIkB,EAAevB,IAAe,GAChCQ,GAAa,SAAAgB,GAAO,OAAIA,EAAU,KAGf,IAAjBD,EAAoB,CAEtB,IAAIE,EAAcZ,EAAW,EAC7BC,EAAYW,GACRA,EAAc,IAAM,IAEtBT,GAAe,SAAAU,GAAK,OAAIA,EAAQ,KAChClB,GAAa,SAAAgB,GAAO,OAAIA,EAjDT,QAmDjBlB,EAtDoB,WAyDpBA,EAAaiB,KAEd,KACMd,IAAeE,EAExBU,EAAWC,aAAY,WACrBd,GAAa,SAAAgB,GAAO,OAAIA,EAAU,KACb,IAAjBjB,GACFY,MAED,KACOV,GAEVkB,cAAcN,GAET,kBAAMM,cAAcN,MAC1B,CAACZ,EAAYE,EAASN,EAAcE,EAtEd,IAsE8CP,EAzE3C,KAyE4Ea,EAAUM,IAGhH,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,2CACA,wCAAc3B,KAAK4B,MAAMxB,EAAe,IAAxC,KAA+CA,EAAe,GAA9D,KACA,wCAAcJ,KAAK4B,MAAMtB,EAAe,IAAxC,KAA+CA,EAAe,GAA9D,KACA,qCACA,uCAAaM,GACb,0CAAgBE,GAChB,4BAAQa,UAAS,+CAA0CjB,EAAU,SAAW,YAAcmB,QAtEpG,WACOrB,IAEHC,GAAc,GACdI,EAAY,GACZE,EAAe,IAEbL,GACFL,EAtBwB,MAwB1BM,GAAYD,KA6DLA,EAAU,QAAU,SAEvB,4BAAQiB,UAAU,SAASE,QAASX,GAApC,SAGA,kBAAC,IAAD,CACEY,eAAa,EACbC,gBAAc,EACdC,iBAAiB,EACjBC,uBAAuB,yBACvBC,KAAK,OACLC,WAAY,CACVC,KAAM,GAERC,kBAAkB,QAClBC,oBAAqB,0CACrBC,kBAAkB,kBAClBC,MAAOxB,EACPyB,OAAQxB,OCjGEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c1609e4d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport EdiText from 'react-editext';\n\nimport '../css/App.css';\n\nfunction App() {\n  const pomodoroDurationSec = 25 * 60;\n  const shortBreakTimeSec = 5 * 60;\n  const breakRatio = Math.ceil(pomodoroDurationSec / shortBreakTimeSec);\n  const longBreakTimeSec = 15 * 60;\n\n  const [focusTimeSec, setFocusTime] = useState(pomodoroDurationSec);\n  const [breakTimeSec, setBreakTime] = useState(0);\n  const [isCounting, setIsCounting] = useState(false);\n  const [isFocus, setIsFocus] = useState(false);\n  const [pomCount, setPomCount] = useState(0);\n  const [cloverCount, setCloverCount] = useState(0);\n\n  const[flowNotes, setFlowNotes] = useState('Flow Notes');\n\n  function toggleFocus() {\n    if (!isCounting) {\n      // This is the first run after a reset\n      setIsCounting(true);\n      setPomCount(0);\n      setCloverCount(0);\n    }\n    if (isFocus) {\n      setFocusTime(pomodoroDurationSec);\n    }\n    setIsFocus(!isFocus);\n  }\n\n  function reset() {\n    setFocusTime(pomodoroDurationSec);\n    setBreakTime(0);\n    setIsFocus(false);\n    setIsCounting(false);\n  }\n\n  useEffect(() => {\n    let interval = null;\n\n    if (isCounting && isFocus) {\n      // In a focus session\n      interval = setInterval(() => {\n        let newFocusTime = focusTimeSec - 1\n        if (newFocusTime % breakRatio === 0) {\n          setBreakTime(seconds => seconds + 1);\n        }\n\n        if (newFocusTime === 0) {\n          // Completed a Pom\n          let newPomCount = pomCount + 1;\n          setPomCount(newPomCount);\n          if (newPomCount % 4 === 0) {\n            // Completed a Clover\n            setCloverCount(count => count + 1)\n            setBreakTime(seconds => seconds + longBreakTimeSec)\n          }\n          setFocusTime(pomodoroDurationSec);\n        } else {\n          // Normal execution\n          setFocusTime(newFocusTime);\n        }\n      }, 1000);\n    } else if (isCounting && !isFocus) {\n      // In a break session\n      interval = setInterval(() => {\n        setBreakTime(seconds => seconds - 1);\n        if (breakTimeSec === 0) {\n          reset();\n        }\n      }, 1000);\n    } else if (!isCounting) {\n      // Reset\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isCounting, isFocus, focusTimeSec, breakTimeSec, longBreakTimeSec, breakRatio, pomodoroDurationSec, pomCount, reset]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Flowmodoro!</h1>\n        <span>Focus: {Math.floor(focusTimeSec / 60)}m {focusTimeSec % 60}s</span>\n        <span>Break: {Math.floor(breakTimeSec / 60)}m {breakTimeSec % 60}s</span>\n        <span>---</span>\n        <span>Poms: {pomCount}</span>\n        <span>Clovers: {cloverCount}</span>\n        <button className={`button button-primary button-primary-${isFocus ? 'active' : 'inactive'}`} onClick={toggleFocus}>\n          {isFocus ? 'Break' : 'Focus'}\n        </button>\n        <button className=\"button\" onClick={reset}>\n          Reset\n        </button>\n        <EdiText\n          submitOnEnter\n          cancelOnEscape\n          editOnViewClick={true}\n          viewContainerClassName='my-custom-view-wrapper'\n          type=\"text\"\n          inputProps={{\n            rows: 5\n          }}\n          saveButtonContent='Apply'\n          cancelButtonContent={<strong>Cancel</strong>}\n          editButtonContent='Edit Flow Notes'\n          value={flowNotes}\n          onSave={setFlowNotes}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/css/index.css';\nimport App from './components/js/App';\nimport * as serviceWorker from './models/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}