{"version":3,"sources":["assets/sounds/me-too-603.mp3","assets/sounds/pristine-609.mp3","assets/sounds/hold-on-560.mp3","assets/sounds/come-to-daddy-511.mp3","constants.js","components/TimeDisplay.js","components/Timer.js","components/App.js","models/serviceWorker.js","assets/fonts/square_sans_serif.ttf","index.js"],"names":["COLORS","Display","styled","p","STYLES","primary","secondary","TimeDisplay","props","minutes","Math","floor","seconds","slice","style","variant","Wrapper","div","Timer","pomodoroDurationSec","breakRatio","ceil","useState","focusTimeSec","setFocusTime","breakTimeSec","setBreakTime","isCounting","setIsCounting","isFocus","setIsFocus","pomCount","setPomCount","cloverCount","setCloverCount","lastTickTime","setLastTickTime","flowNotes","setFlowNotes","useSound","startSfx","playStartHook","endSfx","playEndHook","breakEndWarningSfx","playBreakEndWarningHook","resetSfx","playResetHook","a","reset","playResetSfx","getElapsed","Date","now","console","log","elapsed","round","useEffect","interval","setInterval","newFocusTime","Array","keys","i","newPomCount","playEndSfx","count","playBreakEndWarningSfx","clearInterval","className","onClick","playStartSfx","submitOnEnter","cancelOnEscape","editOnViewClick","viewContainerClassName","type","inputProps","rows","saveButtonContent","cancelButtonContent","editButtonContent","value","onSave","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9da9ae6c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/me-too-603.14aaa2d5.mp3\";","export default __webpack_public_path__ + \"static/media/pristine-609.4aca068a.mp3\";","export default __webpack_public_path__ + \"static/media/hold-on-560.603e537e.mp3\";","export default __webpack_public_path__ + \"static/media/come-to-daddy-511.8691ddcc.mp3\";","export const COLORS = {\n    orange: 'hsl(5deg 100% 53%)',\n    tan: 'hsl(39deg 27% 69%)',\n    purple: 'hsl(264deg 28% 20%)',\n    burgundy: 'hsl(348deg 85% 39%)',\n    gray50: 'hsl(0deg 0% 95%)',\n    gray300: 'hsl(0deg 0% 75%)',\n    gray500: 'hsl(0deg 0% 50%)',\n    gray700: 'hsl(0deg 0% 40%)',\n    black: 'hsl(0deg 0% 0%)',\n    transparentGray15: 'hsl(0deg 0% 50% / 0.15)',\n    transparentGray35: 'hsl(0deg 0% 50% / 0.35)',\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../constants\";\n\nfunction TimeDisplay(props) {\n  const minutes = (\"0\" + Math.floor(props.seconds / 60)).slice(-2);\n  const seconds = (\"0\" + (props.seconds % 60)).slice(-2);\n  const style = STYLES[props.variant];\n\n  return (\n    <Display style={style}>\n      {minutes}:{seconds}\n    </Display>\n  );\n}\n\nTimeDisplay.propTypes = {\n  seconds: PropTypes.number,\n  variant: PropTypes.string,\n};\n\nconst Display = styled.p`\n  font-family: SquareSans;\n  font-size: var(--font-size);\n  transform: scale(0.75, 1);\n  letter-spacing: 0.15rem;\n  font-weight: var(--font-weight);\n  color: var(--color);\n\n  /* Optical centering because the font has trailing space in each glyph*/\n  margin-right: var(--margin-right);\n`;\n\nconst STYLES = {\n  primary: {\n    \"--font-weight\": 1000,\n    \"--font-size\": 3 + \"rem\",\n    \"--margin-right\": -0.4 + \"rem\",\n    \"--color\": COLORS.burgundy,\n  },\n  secondary: {\n    \"--font-weight\": 300,\n    \"--font-size\": 1.5 + \"rem\",\n    \"--margin-right\": -0.15 + \"rem\",\n    \"--color\": COLORS.purple,\n  },\n};\n\nexport default TimeDisplay;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport EdiText from \"react-editext\";\nimport useSound from \"use-sound\";\n\nimport startSfx from \"../assets/sounds/me-too-603.mp3\";\nimport endSfx from \"../assets/sounds/pristine-609.mp3\";\nimport breakEndWarningSfx from \"../assets/sounds/hold-on-560.mp3\";\nimport resetSfx from \"../assets/sounds/come-to-daddy-511.mp3\";\nimport TimeDisplay from \"./TimeDisplay\";\n\nfunction Timer() {\n  const pomodoroDurationSec = 25 * 60;\n  const shortBreakTimeSec = 5 * 60;\n  const breakRatio = Math.ceil(pomodoroDurationSec / shortBreakTimeSec);\n  const longBreakTimeSec = 15 * 60;\n\n  const [focusTimeSec, setFocusTime] = useState(pomodoroDurationSec);\n  const [breakTimeSec, setBreakTime] = useState(0);\n  const [isCounting, setIsCounting] = useState(false);\n  const [isFocus, setIsFocus] = useState(false);\n  const [pomCount, setPomCount] = useState(0);\n  const [cloverCount, setCloverCount] = useState(0);\n  const [lastTickTime, setLastTickTime] = useState(0);\n\n  const [flowNotes, setFlowNotes] = useState(\"Flow Notes\");\n\n  // FIXME: Make sound functions async so they don't halt the timer\n  const [playStartHook] = useSound(startSfx);\n  const [playEndHook] = useSound(endSfx);\n  const [playBreakEndWarningHook] = useSound(breakEndWarningSfx);\n  const [playResetHook] = useSound(resetSfx);\n\n  async function playEndSfx() {\n    playEndHook();\n  }\n\n  async function playStartSfx() {\n    playStartHook();\n  }\n\n  async function playBreakEndWarningSfx() {\n    playBreakEndWarningHook();\n  }\n\n  async function playResetSfx() {\n    playResetHook();\n  }\n\n  function toggleFocus() {\n    if (!isCounting) {\n      // This is the first run after a reset\n      setIsCounting(true);\n      setPomCount(0);\n      setCloverCount(0);\n      playStartSfx();\n    }\n\n    setIsFocus(!isFocus);\n  }\n\n  function reset() {\n    setFocusTime(pomodoroDurationSec);\n    setBreakTime(0);\n    setIsFocus(false);\n    setIsCounting(false);\n    setLastTickTime(0);\n    playResetSfx();\n  }\n\n  function getElapsed() {\n    if (lastTickTime === 0) {\n      setLastTickTime(Date.now());\n      console.log(lastTickTime);\n      console.log(0);\n      return 1;\n    }\n\n    let elapsed = Math.round((Date.now() - lastTickTime) / 1000);\n    console.log(elapsed + \" sec elapsed\");\n    setLastTickTime(Date.now());\n    return elapsed;\n  }\n\n  useEffect(() => {\n    let interval = null;\n\n    if (isCounting && isFocus) {\n      // In a focus session\n      interval = setInterval(() => {\n        let elapsed = getElapsed();\n\n        let newFocusTime = focusTimeSec - elapsed;\n\n        for (const i of Array(elapsed).keys()) {\n          let testTime = focusTimeSec - i;\n          if (testTime % breakRatio === 0) {\n            setBreakTime((seconds) => seconds + 1);\n          }\n        }\n\n        if (newFocusTime <= 0) {\n          // Completed a Pom\n          let newPomCount = pomCount + 1;\n          setPomCount(newPomCount);\n          playEndSfx();\n          if (newPomCount % 4 === 0) {\n            // Completed a Clover\n            setCloverCount((count) => count + 1);\n            setBreakTime((seconds) => seconds + longBreakTimeSec);\n          }\n          setFocusTime(pomodoroDurationSec);\n        } else {\n          // Normal execution\n          setFocusTime(newFocusTime);\n        }\n      }, 1000);\n    } else if (isCounting && !isFocus) {\n      // In a break session\n      interval = setInterval(() => {\n        let elapsed = getElapsed();\n\n        setBreakTime((seconds) => seconds - elapsed);\n\n        if (breakTimeSec === 10) {\n          playBreakEndWarningSfx();\n        }\n\n        // TODO: Maybe give a bit of leeway with break time?\n        if (breakTimeSec === 0) {\n          reset();\n        }\n      }, 1000);\n    } else if (!isCounting) {\n      // Reset\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [\n    isCounting,\n    isFocus,\n    focusTimeSec,\n    breakTimeSec,\n    longBreakTimeSec,\n    breakRatio,\n    pomodoroDurationSec,\n    pomCount,\n    lastTickTime,\n    reset,\n  ]);\n\n  return (\n    <Wrapper>\n      <TimeDisplay seconds={focusTimeSec} variant=\"primary\" />\n      <TimeDisplay seconds={breakTimeSec} variant=\"secondary\" />\n      <span>---</span>\n      <span>Poms: {pomCount}</span>\n      <span>Clovers: {cloverCount}</span>\n      <button\n        className={`button button-primary button-primary-${\n          isFocus ? \"active\" : \"inactive\"\n        }`}\n        onClick={toggleFocus}\n      >\n        {isFocus ? \"Break\" : \"Focus\"}\n      </button>\n      <button className=\"button\" onClick={reset}>\n        Reset\n      </button>\n      <EdiText\n        submitOnEnter\n        cancelOnEscape\n        editOnViewClick={true}\n        viewContainerClassName=\"my-custom-view-wrapper\"\n        type=\"text\"\n        inputProps={{\n          rows: 5,\n        }}\n        saveButtonContent=\"Apply\"\n        cancelButtonContent={<strong>Cancel</strong>}\n        editButtonContent=\"Edit Flow Notes\"\n        value={flowNotes}\n        onSave={setFlowNotes}\n      />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 100%;\n`;\n\nexport default Timer;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport Timer from './Timer';\nimport { COLORS } from '../constants';\n\nexport default function App() {\n    return(\n        <Wrapper>\n            <Timer />\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.div`\n  height: 100%;\n  background-color: ${COLORS.gray300}\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/square_sans_serif.80a58cf0.ttf\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./reset.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./models/serviceWorker\";\n\nimport \"./assets/fonts/square_sans_serif.ttf\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}