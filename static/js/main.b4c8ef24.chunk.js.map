{"version":3,"sources":["assets/sounds/me-too-603.mp3","assets/sounds/pristine-609.mp3","assets/sounds/hold-on-560.mp3","assets/sounds/come-to-daddy-511.mp3","constants.js","components/TimeDisplay.js","components/Button.js","components/Arc.js","components/SectionedCircle.js","components/PomArchive.js","components/Timer.js","assets/images/the_glacier_above.jpg","assets/images/wolf.svg","components/TopBar.js","assets/images/x-mark.svg","components/AboutModal.js","components/App.js","models/serviceWorker.js","assets/fonts/square_sans_serif.ttf","assets/fonts/Quicksand-VariableFont_wght.ttf","index.js"],"names":["COLORS","Display","styled","p","STYLES","primary","secondary","TimeDisplay","props","minutes","Math","floor","seconds","slice","style","variant","ButtonWrapper","button","isVisible","TYPES","Button","ButtonType","type","text","isActive","activeText","inactiveText","onClick","SvgArc","svg","dims","Arc","centerPoint","radius","fill","stroke","color","strokeWidth","d","describeArc","startAngleDeg","endAngleDeg","polarToCartesian","centerX","centerY","angleInDegrees","angleinRadians","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","join","Wrapper","div","SectionedCircle","arcs","data","length","totalTime","reduce","a","b","startDeg","endDeg","isFocus","result","forEach","arcLen","push","createArcs","PomArchive","circleData","timeBlocks","pomIndices","prevIndex","index","extractCircles","map","circle","Timer","pomodoroDurationSec","breakRatio","ceil","useState","focusTimeSec","setFocusTime","breakTimeSec","setBreakTime","isCounting","setIsCounting","isPaused","setIsPaused","setIsFocus","pomCount","setPomCount","setCloverCount","lastTickTime","setLastTickTime","ticker","setTicker","archive","updateArchive","updatePomIndices","useSound","startSfx","playStartHook","endSfx","playEndHook","breakEndWarningSfx","playBreakEndWarningHook","resetSfx","playResetHook","reset","playResetSfx","getElapsed","Date","now","elapsed","round","useEffect","interval","setInterval","newFocusTime","Array","keys","i","newPomCount","prev","playEndSfx","count","clearInterval","playBreakEndWarningSfx","playStartSfx","FaqLink","TopBar","onFaqClick","href","target","rel","src","Wolf","alt","height","width","AboutModal","onCloseClicked","CloseButton","XMark","img","App","isAboutModalOpen","setIsAboutModalOpen","Background","BackgroundOverlay","backgroundImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4c8ef24.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/me-too-603.14aaa2d5.mp3\";","export default __webpack_public_path__ + \"static/media/pristine-609.4aca068a.mp3\";","export default __webpack_public_path__ + \"static/media/hold-on-560.603e537e.mp3\";","export default __webpack_public_path__ + \"static/media/come-to-daddy-511.8691ddcc.mp3\";","export const COLORS = {\n    orange: \"hsl(5deg 100% 53%)\",\n    tan: \"hsl(39deg 27% 69%)\",\n    purple: \"hsl(264deg 28% 20%)\",\n    lightpurple: \"hsl(264deg 15% 40%)\",\n    burgundy: \"hsl(348deg 85% 39%)\",\n    gray50: \"hsl(0deg 0% 95%)\",\n    gray300: \"hsl(0deg 0% 75%)\",\n    gray500: \"hsl(0deg 0% 50%)\",\n    gray700: \"hsl(0deg 0% 40%)\",\n    black: \"hsl(0deg 0% 0%)\",\n    transparentGray15: \"hsl(0deg 0% 50% / 0.15)\",\n    transparentGray35: \"hsl(0deg 0% 50% / 0.35)\",\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../constants\";\n\nfunction TimeDisplay(props) {\n    const minutes = (\"0\" + Math.floor(props.seconds / 60)).slice(-2);\n    const seconds = (\"0\" + (props.seconds % 60)).slice(-2);\n    const style = STYLES[props.variant];\n\n    return (\n        <Display style={style}>\n            {minutes}:{seconds}\n        </Display>\n    );\n}\n\nTimeDisplay.propTypes = {\n    seconds: PropTypes.number,\n    variant: PropTypes.string,\n};\n\nconst Display = styled.p`\n    font-family: SquareSans;\n    font-size: var(--font-size);\n    transform: scale(0.75, 1);\n    letter-spacing: 0.15rem;\n    font-weight: var(--font-weight);\n    color: var(--color);\n\n    /* Optical centering because the font has trailing space in each glyph*/\n    margin-right: var(--margin-right);\n`;\n\nconst STYLES = {\n    primary: {\n        \"--font-weight\": 1000,\n        \"--font-size\": 10 + \"rem\",\n        \"--margin-right\": -1 + \"rem\",\n        \"--color\": COLORS.burgundy,\n    },\n    secondary: {\n        \"--font-weight\": 300,\n        \"--font-size\": 5 + \"rem\",\n        \"--margin-right\": -0.5 + \"rem\",\n        \"--color\": COLORS.purple,\n    },\n};\n\nexport default TimeDisplay;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../constants\";\n\nfunction Button(props) {\n    const ButtonType = TYPES[props.type];\n    const text = props.isActive ? props.activeText : props.inactiveText;\n\n    return (\n        <ButtonType onClick={props.onClick} isVisible={props.isVisible}>\n            {text}\n        </ButtonType>\n    );\n}\n\nButton.propTypes = {\n    type: PropTypes.string,\n    isActive: PropTypes.bool,\n    activeText: PropTypes.string,\n    inactiveText: PropTypes.string,\n    onClick: PropTypes.func,\n    isVisible: PropTypes.bool,\n};\n\nconst ButtonWrapper = styled.button`\n    background-color: transparent;\n    color: ${COLORS.lightpurple};\n    font-family: Quicksand;\n    font-weight: 400;\n    margin-bottom: 15px;\n    visibility: ${(props) => !props.isVisible && \"hidden\"};\n\n    &:hover {\n        color: ${COLORS.purple};\n        cursor: pointer;\n    }\n`;\n\nconst PrimaryButton = styled(ButtonWrapper)`\n    border: 5px solid ${COLORS.lightpurple};\n    border-radius: 25%/50%;\n    width: 150px;\n    height: 57px;\n    font-size: 2rem;\n\n    &:hover {\n        border-color: ${COLORS.purple};\n        box-shadow: 0 5px 5px ${COLORS.transparentGray35};\n        text-shadow: 0 3px 3px ${COLORS.transparentGray35};\n    }\n\n    &:active {\n        box-shadow: 0 3px 3px ${COLORS.transparentGray35};\n        text-shadow: 0 1px 1px ${COLORS.transparentGray35};\n        transform: translateY(2px);\n    }\n`;\n\nconst SecondaryButton = styled(ButtonWrapper)`\n    font-size: 1rem;\n    border: none;\n    text-decoration: underline;\n`;\n\nconst TYPES = {\n    primary: PrimaryButton,\n    secondary: SecondaryButton,\n};\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { COLORS } from \"../constants\";\nimport styled from \"styled-components\";\n\nfunction Arc(props) {\n    const centerPoint = props.radius / 2;\n    return (\n        <SvgArc dims={props.radius + \"px\"}>\n            <path\n                fill=\"none\"\n                stroke={props.color}\n                strokeWidth={props.strokeWidth}\n                d={describeArc(\n                    centerPoint,\n                    centerPoint,\n                    props.radius / 2 - props.strokeWidth,\n                    props.startAngleDeg,\n                    props.endAngleDeg\n                )}\n            />\n        </SvgArc>\n    );\n}\n\nArc.propTypes = {\n    radius: PropTypes.number.isRequired,\n    startAngleDeg: PropTypes.number.isRequired,\n    endAngleDeg: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n};\n\nconst SvgArc = styled.svg`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: ${(props) => props.dims};\n    height: ${(props) => props.dims};\n    margin: auto;\n    pointer-events: none;\n`;\n\nexport default Arc;\n\n/*\n    Arc drawing from https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n*/\n\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleinRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n    return {\n        x: centerX + radius * Math.cos(angleinRadians),\n        y: centerY + radius * Math.sin(angleinRadians),\n    };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n\n    var largeArcFlag = \"0\";\n    if (endAngle >= startAngle) {\n        largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n    } else {\n        largeArcFlag = endAngle + 360.0 - startAngle <= 180 ? \"0\" : \"1\";\n    }\n\n    var d = [\n        \"M\",\n        start.x,\n        start.y,\n        \"A\",\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y,\n    ].join(\" \");\n\n    return d;\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Arc from \"./Arc\";\nimport { COLORS } from \"../constants\";\n\nfunction SectionedCircle(props) {\n    function createArcs(data) {\n        if (data.length === 0) {\n            return [];\n        }\n        let totalTime = 0;\n        totalTime = data.reduce((a, b) => a + b);\n\n        let startDeg = 0;\n        let endDeg = 0;\n\n        let isFocus = true; // Assume that the first elem of any circle is focus b/c baked into timer logic\n\n        let result = [];\n\n        data.forEach((arcLen) => {\n            endDeg = startDeg + (arcLen / totalTime) * 360;\n\n            // Hack: 360 counts as 0 :()\n            if (endDeg === 360) {\n                endDeg = 359.99;\n            }\n            result.push(\n                <Arc\n                    radius={props.radius}\n                    startAngleDeg={startDeg}\n                    endAngleDeg={endDeg}\n                    color={isFocus ? COLORS.burgundy : COLORS.purple}\n                    strokeWidth={props.strokeWidth}\n                />\n            );\n\n            startDeg = endDeg;\n            isFocus = !isFocus;\n        });\n\n        return result;\n    }\n\n    const arcs = createArcs(props.data);\n\n    return <Wrapper dims={props.radius + \"px\"}>{arcs}</Wrapper>;\n}\n\nSectionedCircle.propTypes = {\n    radius: PropTypes.number.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    data: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst Wrapper = styled.div`\n    display: inline;\n    position: relative;\n    width: ${(props) => props.dims};\n    height: ${(props) => props.dims};\n`;\n\nexport default SectionedCircle;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SectionedCircle from \"./SectionedCircle\";\nimport styled from \"styled-components\";\n\nfunction PomArchive(props) {\n    function extractCircles(timeBlocks, pomIndices) {\n        let result = [];\n\n        let prevIndex = 0;\n        pomIndices.forEach((index) => {\n            result.push(timeBlocks.slice(prevIndex, index + 1));\n            prevIndex = index + 1;\n        });\n        return result;\n    }\n\n    const circleData = extractCircles(props.timeBlocks, props.pomIndices);\n\n    return (\n        <Wrapper>\n            {circleData.map((circle) => (\n                <SectionedCircle data={circle} radius={50} strokeWidth={5} />\n            ))}\n        </Wrapper>\n    );\n}\n\nPomArchive.propTypes = {\n    timeBlocks: PropTypes.arrayOf(PropTypes.number),\n    pomIndices: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst Wrapper = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    width: 400px;\n    height: 52px;\n    flex-wrap: wrap;\n    margin-top: 30px;\n`;\n\nexport default PomArchive;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport EdiText from \"react-editext\";\nimport useSound from \"use-sound\";\n\nimport startSfx from \"../assets/sounds/me-too-603.mp3\";\nimport endSfx from \"../assets/sounds/pristine-609.mp3\";\nimport breakEndWarningSfx from \"../assets/sounds/hold-on-560.mp3\";\nimport resetSfx from \"../assets/sounds/come-to-daddy-511.mp3\";\nimport TimeDisplay from \"./TimeDisplay\";\nimport Button from \"./Button\";\nimport Arc from \"./Arc\";\nimport { COLORS } from \"../constants\";\nimport PomArchive from \"./PomArchive\";\n\nfunction Timer() {\n    const pomodoroDurationSec = 25 * 60;\n    const shortBreakTimeSec = 5 * 60;\n    const breakRatio = Math.ceil(pomodoroDurationSec / shortBreakTimeSec);\n    const longBreakTimeSec = 15 * 60;\n\n    const [focusTimeSec, setFocusTime] = useState(pomodoroDurationSec);\n    const [breakTimeSec, setBreakTime] = useState(0);\n    const [isCounting, setIsCounting] = useState(false);\n    const [isPaused, setIsPaused] = useState(false);\n    const [isFocus, setIsFocus] = useState(false);\n    const [pomCount, setPomCount] = useState(0);\n    const [cloverCount, setCloverCount] = useState(0);\n    const [lastTickTime, setLastTickTime] = useState(0);\n\n    const [ticker, setTicker] = useState(0);\n    const [archive, updateArchive] = useState([]);\n    const [pomIndices, updatePomIndices] = useState([]);\n\n    const [flowNotes, setFlowNotes] = useState(\"Flow Notes\");\n\n    // FIXME: Make sound functions async so they don't halt the timer\n    const [playStartHook] = useSound(startSfx);\n    const [playEndHook] = useSound(endSfx);\n    const [playBreakEndWarningHook] = useSound(breakEndWarningSfx);\n    const [playResetHook] = useSound(resetSfx);\n\n    async function playEndSfx() {\n        playEndHook();\n    }\n\n    async function playStartSfx() {\n        playStartHook();\n    }\n\n    async function playBreakEndWarningSfx() {\n        playBreakEndWarningHook();\n    }\n\n    async function playResetSfx() {\n        playResetHook();\n    }\n\n    function togglePaused() {\n        if (!isPaused) {\n            setIsPaused(true);\n        } else {\n            setIsPaused(false);\n            setLastTickTime(Date.now);\n        }\n    }\n\n    function toggleFocus() {\n        if (!isCounting) {\n            // This is the first run after a reset\n            setIsCounting(true);\n            setPomCount(0);\n            setCloverCount(0);\n            playStartSfx();\n        } else {\n            updateArchive((prev) => [...prev, ticker]);\n        }\n\n        setIsFocus(!isFocus);\n        setTicker(0);\n    }\n\n    function reset() {\n        setFocusTime(pomodoroDurationSec);\n        setBreakTime(0);\n        setIsFocus(false);\n        setIsCounting(false);\n        setIsPaused(false);\n        setLastTickTime(0);\n        playResetSfx();\n        updateArchive([]);\n        updatePomIndices([]);\n    }\n\n    function getElapsed() {\n        if (lastTickTime === 0) {\n            setLastTickTime(Date.now());\n            return 1;\n        }\n\n        let elapsed = Math.round((Date.now() - lastTickTime) / 1000);\n        setLastTickTime(Date.now());\n        return elapsed;\n    }\n\n    useEffect(() => {\n        let interval = null;\n\n        if (isCounting && !isPaused && isFocus) {\n            // In a focus session\n            interval = setInterval(() => {\n                let elapsed = getElapsed();\n                setTicker((ticker) => ticker + elapsed);\n\n                let newFocusTime = focusTimeSec - elapsed;\n\n                // Since multiple seconds could have elapsed, check if we earned a break for any of those seconds.\n                for (const i of Array(elapsed).keys()) {\n                    let testTime = focusTimeSec - i;\n                    if (testTime % breakRatio === 0) {\n                        setBreakTime((seconds) => seconds + 1);\n                    }\n                }\n\n                if (newFocusTime <= 0) {\n                    // Completed a Pom\n                    let newPomCount = pomCount + 1;\n                    setPomCount(newPomCount);\n\n                    updatePomIndices((prev) => [...prev, archive.length]);\n                    updateArchive((prev) => [...prev, ticker]);\n                    setTicker(0);\n\n                    playEndSfx();\n                    if (newPomCount % 4 === 0) {\n                        // Completed a Clover\n                        setCloverCount((count) => count + 1);\n                        setBreakTime((seconds) => seconds + longBreakTimeSec);\n                    }\n                    setFocusTime(pomodoroDurationSec);\n                } else {\n                    // Normal execution\n                    setFocusTime(newFocusTime);\n                }\n            }, 1000);\n        } else if (isCounting && !isPaused && !isFocus) {\n            // In a break session\n            interval = setInterval(() => {\n                let elapsed = getElapsed();\n                setTicker((ticker) => ticker + elapsed);\n\n                setBreakTime((seconds) => seconds - elapsed);\n\n                if (breakTimeSec === 10) {\n                    playBreakEndWarningSfx();\n                }\n\n                // TODO: Maybe give a bit of leeway with break time?\n                if (breakTimeSec <= 0) {\n                    reset();\n                }\n            }, 1000);\n        } else if (!isCounting) {\n            // Reset\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [\n        isCounting,\n        isFocus,\n        focusTimeSec,\n        breakTimeSec,\n        longBreakTimeSec,\n        breakRatio,\n        pomodoroDurationSec,\n        pomCount,\n        lastTickTime,\n        reset,\n    ]);\n\n    return (\n        <Wrapper>\n            <Button\n                type=\"primary\"\n                isActive={isFocus}\n                activeText=\"break.\"\n                inactiveText=\"focus.\"\n                onClick={toggleFocus}\n                isVisible={!isPaused}\n            />\n            <Button\n                type=\"secondary\"\n                isActive={!isPaused}\n                activeText=\"pause.\"\n                inactiveText=\"resume.\"\n                onClick={togglePaused}\n                isVisible={isCounting}\n            />\n            <TimeDisplay seconds={focusTimeSec} variant=\"primary\" />\n            <TimeDisplay seconds={breakTimeSec} variant=\"secondary\" />\n            <Arc\n                color={COLORS.burgundy}\n                radius={600}\n                strokeWidth={10}\n                startAngleDeg={0}\n                endAngleDeg={\n                    ((pomodoroDurationSec - focusTimeSec) /\n                        pomodoroDurationSec) *\n                    360\n                }\n            />\n            <Arc\n                color={COLORS.purple}\n                radius={610}\n                strokeWidth={5}\n                startAngleDeg={\n                    breakTimeSec >= pomodoroDurationSec\n                        ? -359.99\n                        : (breakTimeSec / pomodoroDurationSec) * -360\n                }\n                endAngleDeg={0}\n            />\n            <PomArchive timeBlocks={archive} pomIndices={pomIndices} />\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    min-height: 100%;\n`;\n\nexport default Timer;\n","export default __webpack_public_path__ + \"static/media/the_glacier_above.77dd735f.jpg\";","export default __webpack_public_path__ + \"static/media/wolf.40c2c48f.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport Wolf from \"../assets/images/wolf.svg\";\nimport { COLORS } from \"../constants\";\n\nfunction TopBar({ onFaqClick }) {\n    return (\n        <Wrapper>\n            <a\n                href=\"https://aklarans.voyage\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <img src={Wolf} alt=\"Aklaran\" height=\"50px\" width=\"50px\" />\n            </a>\n            <div>\n                <FaqLink onClick={() => onFaqClick(true)}>\n                    What is this?\n                </FaqLink>\n            </div>\n        </Wrapper>\n    );\n}\n\nTopBar.propTypes = {\n    onFaqClick: PropTypes.func,\n};\n\nconst Wrapper = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    padding: 25px;\n`;\n\nconst FaqLink = styled.a`\n    font-family: Quicksand;\n    color: ${COLORS.lightpurple};\n\n    &:hover {\n        color: ${COLORS.purple};\n        cursor: pointer;\n    }\n`;\n\nexport default TopBar;\n","export default __webpack_public_path__ + \"static/media/x-mark.cd5cec91.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../constants\";\n\nimport XMark from \"../assets/images/x-mark.svg\";\n\nfunction AboutModal({ onCloseClicked }) {\n    return (\n        <Wrapper>\n            <CloseButton\n                src={XMark}\n                alt=\"Close\"\n                onClick={() => onCloseClicked(false)}\n            />\n            <h1>What is Flowmodoro?</h1>\n            <p>\n                Flowmodoro is the only Pomodoro timer that understands your life\n                is hectic. It works just like a regular Pomodoro timer, but\n                allows you to be flexible on the length of your focus sessions\n                *without* punishing you.\n            </p>\n            <ol>\n                <li>Click \"Focus\" to start the focus timer.</li>\n                <li>\n                    Every 5 seconds of focus, Flowmodoro grants you 1 second of\n                    focus time. That amounts to 5 minutes of break after 25\n                    minutes of focus.\n                </li>\n                <li>\n                    When you click \"Break\", the focus timer pauses, and the\n                    break timer starts counting down with whatever amount you\n                    have accumulated.\n                </li>\n                <li>\n                    As long the break timer stays above 0, you can click \"Focus\"\n                    to resume the focus timer where it left off.\n                </li>\n                <li>\n                    Once you have focused for 25 minutes, you have completed a\n                    focus session (we call it a Pom)!\n                </li>\n                <li>\n                    After completing 4 focus sessions, you've completed a\n                    Clover! For every Clover completed, Flowmodoro grants you an\n                    instant 15 minutes of break.\n                </li>\n                <li>\n                    Keep flowing, do what you need to do, and kick back once\n                    you're done :)\n                </li>\n            </ol>\n        </Wrapper>\n    );\n}\n\nAboutModal.propTypes = {\n    onCloseClicked: PropTypes.func,\n};\n\nexport default AboutModal;\n\nconst Wrapper = styled.div`\n    background-color: white;\n    position: absolute;\n    height: 700px;\n    width: 700px;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n    box-shadow: 0px 5px 5px ${COLORS.transparentGray15};\n    border-radius: 25px;\n    padding: 40px;\n\n    font-family: Quicksand;\n\n    & > h1 {\n        font-size: 2rem;\n        font-weight: 0;\n        margin-bottom: 2rem;\n    }\n\n    & > p,\n    li {\n        margin-bottom: 1rem;\n    }\n\n    & > ol {\n        list-style-type: decimal;\n        list-style-position: outside;\n        margin-left: 1rem;\n    }\n`;\n\nconst CloseButton = styled.img`\n    &:hover {\n        cursor: pointer;\n    }\n\n    position: absolute;\n    top: 15px;\n    right: 15px;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Timer from \"./Timer\";\nimport { COLORS } from \"../constants\";\nimport backgroundImage from \"../assets/images/the_glacier_above.jpg\";\nimport TopBar from \"./TopBar\";\nimport AboutModal from \"./AboutModal\";\n\nexport default function App() {\n    const [isAboutModalOpen, setIsAboutModalOpen] = useState(false);\n\n    return (\n        <Wrapper>\n            <TopBar onFaqClick={setIsAboutModalOpen} />\n            <Timer />\n            <Background />\n            <BackgroundOverlay />\n            {isAboutModalOpen && (\n                <AboutModal onCloseClicked={setIsAboutModalOpen} />\n            )}\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.div`\n    height: 100%;\n`;\n\nconst Background = styled.div`\n    position: absolute;\n    background-image: url(${backgroundImage});\n    background-size: cover;\n    background-position: center center;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n    z-index: -10;\n`;\n\nconst BackgroundOverlay = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    background-color: rgba(255, 255, 255, 0.9);\n    z-index: -9;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/square_sans_serif.80a58cf0.ttf\";","export default __webpack_public_path__ + \"static/media/Quicksand-VariableFont_wght.7dd2a729.ttf\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./reset.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./models/serviceWorker\";\n\nimport \"./assets/fonts/square_sans_serif.ttf\";\nimport \"./assets/fonts/Quicksand-VariableFont_wght.ttf\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App></App>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}