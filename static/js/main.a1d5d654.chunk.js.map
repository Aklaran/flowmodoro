{"version":3,"sources":["assets/sounds/me-too-603.mp3","assets/sounds/pristine-609.mp3","assets/sounds/hold-on-560.mp3","assets/sounds/come-to-daddy-511.mp3","constants.js","components/TimeDisplay.js","components/Button.js","components/Arc.js","components/Timer.js","components/App.js","models/serviceWorker.js","assets/fonts/square_sans_serif.ttf","assets/fonts/Quicksand-VariableFont_wght.ttf","index.js"],"names":["COLORS","Display","styled","p","STYLES","primary","secondary","TimeDisplay","props","minutes","Math","floor","seconds","slice","style","variant","Wrapper","button","Button","text","isActive","activeText","inactiveText","onClick","SvgArc","svg","dims","Arc","centerPoint","radius","fill","stroke","color","stroke-width","d","describeArc","startAngleDeg","endAngleDeg","polarToCartesian","centerX","centerY","angleInDegrees","angleinRadians","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","join","div","Timer","pomodoroDurationSec","breakRatio","ceil","useState","focusTimeSec","setFocusTime","breakTimeSec","setBreakTime","isCounting","setIsCounting","isFocus","setIsFocus","pomCount","setPomCount","cloverCount","setCloverCount","lastTickTime","setLastTickTime","useSound","startSfx","playStartHook","endSfx","playEndHook","breakEndWarningSfx","playBreakEndWarningHook","resetSfx","playResetHook","a","reset","playResetSfx","getElapsed","Date","now","console","log","elapsed","round","useEffect","interval","setInterval","newFocusTime","Array","keys","i","newPomCount","playEndSfx","count","playBreakEndWarningSfx","clearInterval","playStartSfx","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1d5d654.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/me-too-603.14aaa2d5.mp3\";","export default __webpack_public_path__ + \"static/media/pristine-609.4aca068a.mp3\";","export default __webpack_public_path__ + \"static/media/hold-on-560.603e537e.mp3\";","export default __webpack_public_path__ + \"static/media/come-to-daddy-511.8691ddcc.mp3\";","export const COLORS = {\n    orange: \"hsl(5deg 100% 53%)\",\n    tan: \"hsl(39deg 27% 69%)\",\n    purple: \"hsl(264deg 28% 20%)\",\n    lightpurple: \"hsl(264deg 15% 40%)\",\n    burgundy: \"hsl(348deg 85% 39%)\",\n    gray50: \"hsl(0deg 0% 95%)\",\n    gray300: \"hsl(0deg 0% 75%)\",\n    gray500: \"hsl(0deg 0% 50%)\",\n    gray700: \"hsl(0deg 0% 40%)\",\n    black: \"hsl(0deg 0% 0%)\",\n    transparentGray15: \"hsl(0deg 0% 50% / 0.15)\",\n    transparentGray35: \"hsl(0deg 0% 50% / 0.35)\",\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../constants\";\n\nfunction TimeDisplay(props) {\n    const minutes = (\"0\" + Math.floor(props.seconds / 60)).slice(-2);\n    const seconds = (\"0\" + (props.seconds % 60)).slice(-2);\n    const style = STYLES[props.variant];\n\n    return (\n        <Display style={style}>\n            {minutes}:{seconds}\n        </Display>\n    );\n}\n\nTimeDisplay.propTypes = {\n    seconds: PropTypes.number,\n    variant: PropTypes.string,\n};\n\nconst Display = styled.p`\n    font-family: SquareSans;\n    font-size: var(--font-size);\n    transform: scale(0.75, 1);\n    letter-spacing: 0.15rem;\n    font-weight: var(--font-weight);\n    color: var(--color);\n\n    /* Optical centering because the font has trailing space in each glyph*/\n    margin-right: var(--margin-right);\n`;\n\nconst STYLES = {\n    primary: {\n        \"--font-weight\": 1000,\n        \"--font-size\": 10 + \"rem\",\n        \"--margin-right\": -0.8 + \"rem\",\n        \"--color\": COLORS.burgundy,\n    },\n    secondary: {\n        \"--font-weight\": 300,\n        \"--font-size\": 5 + \"rem\",\n        \"--margin-right\": -0.4 + \"rem\",\n        \"--color\": COLORS.purple,\n    },\n};\n\nexport default TimeDisplay;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../constants\";\n\nfunction Button(props) {\n    const text = props.isActive ? props.activeText : props.inactiveText;\n    return <Wrapper onClick={props.onClick}>{text}</Wrapper>;\n}\n\nButton.propTypes = {\n    isActive: PropTypes.bool,\n    activeText: PropTypes.string,\n    inactiveText: PropTypes.string,\n    onClick: PropTypes.func,\n};\n\nconst Wrapper = styled.button`\n    background-color: transparent;\n    border: 5px solid ${COLORS.lightpurple};\n    color: ${COLORS.lightpurple};\n    border-radius: 25%/50%;\n    width: 150px;\n    height: 57px;\n    font-size: 2rem;\n    font-family: Quicksand;\n    font-weight: 400;\n    margin-bottom: 15px;\n\n    &:hover {\n        color: ${COLORS.purple};\n        border-color: ${COLORS.purple};\n        box-shadow: 0 5px ${COLORS.transparentGray35};\n        text-shadow: 0 3px ${COLORS.transparentGray35};\n    }\n\n    &:active {\n        box-shadow: 0 3px ${COLORS.transparentGray35};\n        text-shadow: 0 1px ${COLORS.transparentGray35};\n        transform: translateY(2px);\n    }\n`;\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { COLORS } from \"../constants\";\nimport styled from \"styled-components\";\n\nfunction Arc(props) {\n    const centerPoint = props.radius / 2;\n    const strokeWidth = 5;\n    return (\n        <SvgArc dims={props.radius + \"px\"}>\n            <path\n                fill=\"none\"\n                stroke={props.color}\n                stroke-width={strokeWidth}\n                d={describeArc(\n                    centerPoint,\n                    centerPoint,\n                    props.radius / 2 - strokeWidth,\n                    props.startAngleDeg,\n                    props.endAngleDeg\n                )}\n            />\n        </SvgArc>\n    );\n}\n\nArc.propTypes = {\n    radius: PropTypes.number,\n    startAngleDeg: PropTypes.number,\n    endAngleDeg: PropTypes.number,\n    color: PropTypes.string,\n};\n\nconst SvgArc = styled.svg`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: ${(props) => props.dims};\n    height: ${(props) => props.dims};\n    margin: auto;\n    pointer-events: none;\n`;\n\nexport default Arc;\n\n/*\n    Arc drawing from https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n*/\n\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleinRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n    return {\n        x: centerX + radius * Math.cos(angleinRadians),\n        y: centerY + radius * Math.sin(angleinRadians),\n    };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n\n    var largeArcFlag = \"0\";\n    if (endAngle >= startAngle) {\n        largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n    } else {\n        largeArcFlag = endAngle + 360.0 - startAngle <= 180 ? \"0\" : \"1\";\n    }\n\n    var d = [\n        \"M\",\n        start.x,\n        start.y,\n        \"A\",\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y,\n    ].join(\" \");\n\n    return d;\n}\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport EdiText from \"react-editext\";\nimport useSound from \"use-sound\";\n\nimport startSfx from \"../assets/sounds/me-too-603.mp3\";\nimport endSfx from \"../assets/sounds/pristine-609.mp3\";\nimport breakEndWarningSfx from \"../assets/sounds/hold-on-560.mp3\";\nimport resetSfx from \"../assets/sounds/come-to-daddy-511.mp3\";\nimport TimeDisplay from \"./TimeDisplay\";\nimport Button from \"./Button\";\nimport Arc from \"./Arc\";\nimport { COLORS } from \"../constants\";\n\nfunction Timer() {\n    const pomodoroDurationSec = 25 * 60;\n    const shortBreakTimeSec = 5 * 60;\n    const breakRatio = Math.ceil(pomodoroDurationSec / shortBreakTimeSec);\n    const longBreakTimeSec = 15 * 60;\n\n    const [focusTimeSec, setFocusTime] = useState(pomodoroDurationSec);\n    const [breakTimeSec, setBreakTime] = useState(0);\n    const [isCounting, setIsCounting] = useState(false);\n    const [isFocus, setIsFocus] = useState(false);\n    const [pomCount, setPomCount] = useState(0);\n    const [cloverCount, setCloverCount] = useState(0);\n    const [lastTickTime, setLastTickTime] = useState(0);\n\n    const [flowNotes, setFlowNotes] = useState(\"Flow Notes\");\n\n    // FIXME: Make sound functions async so they don't halt the timer\n    const [playStartHook] = useSound(startSfx);\n    const [playEndHook] = useSound(endSfx);\n    const [playBreakEndWarningHook] = useSound(breakEndWarningSfx);\n    const [playResetHook] = useSound(resetSfx);\n\n    async function playEndSfx() {\n        playEndHook();\n    }\n\n    async function playStartSfx() {\n        playStartHook();\n    }\n\n    async function playBreakEndWarningSfx() {\n        playBreakEndWarningHook();\n    }\n\n    async function playResetSfx() {\n        playResetHook();\n    }\n\n    function toggleFocus() {\n        if (!isCounting) {\n            // This is the first run after a reset\n            setIsCounting(true);\n            setPomCount(0);\n            setCloverCount(0);\n            playStartSfx();\n        }\n\n        setIsFocus(!isFocus);\n    }\n\n    function reset() {\n        setFocusTime(pomodoroDurationSec);\n        setBreakTime(0);\n        setIsFocus(false);\n        setIsCounting(false);\n        setLastTickTime(0);\n        playResetSfx();\n    }\n\n    function getElapsed() {\n        if (lastTickTime === 0) {\n            setLastTickTime(Date.now());\n            console.log(lastTickTime);\n            console.log(0);\n            return 1;\n        }\n\n        let elapsed = Math.round((Date.now() - lastTickTime) / 1000);\n        console.log(elapsed + \" sec elapsed\");\n        setLastTickTime(Date.now());\n        return elapsed;\n    }\n\n    useEffect(() => {\n        let interval = null;\n\n        if (isCounting && isFocus) {\n            // In a focus session\n            interval = setInterval(() => {\n                let elapsed = getElapsed();\n\n                let newFocusTime = focusTimeSec - elapsed;\n\n                for (const i of Array(elapsed).keys()) {\n                    let testTime = focusTimeSec - i;\n                    if (testTime % breakRatio === 0) {\n                        setBreakTime((seconds) => seconds + 1);\n                    }\n                }\n\n                if (newFocusTime <= 0) {\n                    // Completed a Pom\n                    let newPomCount = pomCount + 1;\n                    setPomCount(newPomCount);\n                    playEndSfx();\n                    if (newPomCount % 4 === 0) {\n                        // Completed a Clover\n                        setCloverCount((count) => count + 1);\n                        setBreakTime((seconds) => seconds + longBreakTimeSec);\n                    }\n                    setFocusTime(pomodoroDurationSec);\n                } else {\n                    // Normal execution\n                    setFocusTime(newFocusTime);\n                }\n            }, 1000);\n        } else if (isCounting && !isFocus) {\n            // In a break session\n            interval = setInterval(() => {\n                let elapsed = getElapsed();\n\n                setBreakTime((seconds) => seconds - elapsed);\n\n                if (breakTimeSec === 10) {\n                    playBreakEndWarningSfx();\n                }\n\n                // TODO: Maybe give a bit of leeway with break time?\n                if (breakTimeSec <= 0) {\n                    reset();\n                }\n            }, 1000);\n        } else if (!isCounting) {\n            // Reset\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [\n        isCounting,\n        isFocus,\n        focusTimeSec,\n        breakTimeSec,\n        longBreakTimeSec,\n        breakRatio,\n        pomodoroDurationSec,\n        pomCount,\n        lastTickTime,\n        reset,\n    ]);\n\n    return (\n        <Wrapper>\n            <Button\n                isActive={isFocus}\n                activeText=\"break.\"\n                inactiveText=\"focus.\"\n                onClick={toggleFocus}\n            />\n            <TimeDisplay seconds={focusTimeSec} variant=\"primary\" />\n            <TimeDisplay seconds={breakTimeSec} variant=\"secondary\" />\n            <Arc\n                color={COLORS.burgundy}\n                radius={600}\n                startAngleDeg={0}\n                endAngleDeg={\n                    ((pomodoroDurationSec - focusTimeSec) /\n                        pomodoroDurationSec) *\n                    360\n                }\n            />\n            <Arc\n                color={COLORS.purple}\n                radius={588}\n                startAngleDeg={\n                    breakTimeSec >= pomodoroDurationSec\n                        ? -359.99\n                        : (breakTimeSec / pomodoroDurationSec) * -360\n                }\n                endAngleDeg={0}\n            />\n            <p>\n                {pomCount} ||| {cloverCount}\n            </p>\n        </Wrapper>\n    );\n}\n\n// TODO: Sectioned circles and cool pom archive display\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    min-height: 100%;\n`;\n\nexport default Timer;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Timer from \"./Timer\";\nimport { COLORS } from \"../constants\";\n\nexport default function App() {\n    return (\n        <Wrapper>\n            <Timer />\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.div`\n    height: 100%;\n    background-color: ${COLORS.gray300};\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/square_sans_serif.80a58cf0.ttf\";","export default __webpack_public_path__ + \"static/media/Quicksand-VariableFont_wght.7dd2a729.ttf\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./reset.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./models/serviceWorker\";\n\nimport \"./assets/fonts/square_sans_serif.ttf\";\nimport \"./assets/fonts/Quicksand-VariableFont_wght.ttf\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App></App>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}